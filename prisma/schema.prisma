// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id
  name             String
  email            String
  emailVerified    Boolean      @default(false)
  image            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  twoFactorEnabled Boolean?     @default(false)
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]
  members          Member[]
  invitations      Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id @default(cuid(2))
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid(2))
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Organization {
  id          String        @id @default(cuid(2))
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  Collection  Collection[]
  Environment Environment[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid(2))
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid(2))
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Collection {
  id          String   @id @default(cuid(2))
  name        String
  description String?
  workspaceId String
  parentId    String?
  auth        Json?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Organization @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent    Collection?  @relation("CollectionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Collection[] @relation("CollectionHierarchy")
  requests  Request[]

  @@index([workspaceId])
  @@index([parentId])
}

model Request {
  id           String   @id @default(cuid(2))
  name         String
  type         String // http, websocket, socketio, grpc, graphql
  collectionId String
  config       Json // Stores the full request configuration
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([collectionId])
}

model Environment {
  id          String   @id @default(cuid(2))
  name        String
  workspaceId String
  variables   Json // Array of variables
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Organization @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
}
